namespace PurTools.Util;

internal static class Utility
{
    /// <summary>
    /// Checks if the given label is unique in the specified directory, or generates a unique label if needed
    /// </summary>
    /// <param name="fileDirectory">Path to directory in which the file will be placed</param>
    /// <param name="fileExtension">Extension of the file type</param>
    /// <param name="label">Chosen base label for the file</param>
    /// <returns>A unique file name</returns>
    internal static string GetUniqueFileLabel(string fileDirectory, string fileExtension, string label)
    {
        var directoryInfo = new DirectoryInfo(fileDirectory);
        int occurences = 0;
        int highestOccurence = -1;

        // Make sure the extension starts with a period
        if (!fileExtension.StartsWith("."))
            fileExtension = $".{fileExtension}";

        // Loop over all files with the extension in the given directory
        foreach (var file in directoryInfo.GetFiles($"*{fileExtension}"))
        {
            // Make sure the fileName does not contain the file extension
            // This is to easily check similarities later on
            string fileName = file.Name.Replace(fileExtension, "");

            if (fileName.Equals(label))
                occurences++;
            else if (fileName.StartsWith($"{label}."))
            {
                // When a name is a duplicate, it gets appended with ".number" to avoid duplicate names

                // Split the label and the appended part
                string[] nameParts = fileName.Split('.');

                // File name does not follow this formatting code
                if (nameParts.Length != 2)
                    continue;

                // If the string after the period can be parsed to an int, it could have been generated by this method
                // Which means that we need to assign it another number
                if (int.TryParse(nameParts[1], out int identifier))
                {
                    occurences++;

                    //Make sure we cannot accidentally drop right under another identifier
                    if (identifier <= highestOccurence)
                        continue;

                    highestOccurence = identifier;
                }
            }
        }

        // If the label has already been used, append the label with a unique number
        if (occurences > 0)
            return $"{label}.{highestOccurence + 1}";

        return label;
    }
}
